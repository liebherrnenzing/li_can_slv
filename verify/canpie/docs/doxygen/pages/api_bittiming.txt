//-----------------------------------------------------------------------------
/*!
** \page page.api_bitiming    Bittiming
<hr>
<p>
To ensure correct sampling up to the last bit, a CAN node needs to resynchronize
throughout the entire frame. This is done at the beginning
of each message with the falling edge SOF and on each recessive to
dominant edge.
<p>

One CAN bit time is specified as four non-overlapping time segments.
Each segment is constructed from an integer multiple of the Time
Quantum. The Time Quantum or TQ is the smallest discrete timing resolution
used by a CAN node. The four time segments are:
<ul>
<li> the Synchronization Segment
<li> the Propagation Time Segment
<li> the Phase Segment 1
<li> and the Phase Segment 2
</ul>

<p>
The sample point is the point of time at which the bus level is read and
interpreted as the value (recessive or dominant) of the respective bit.
Its location is at the end of Phase Segment 1 (between the two Phase
Segments).
Programming of the sample point allows "tuning" of the characteristics
to suit the bus. Early sampling allows more Time Quanta in the Phase
Segment 2 so the Synchronization Jump Width can be programmed to
its maximum. This maximum capacity to shorten or lengthen the bit
time decreases the sensitivity to node oscillator tolerances, so that lower
cost oscillators such as ceramic resonators may be used. Late sampling
allows more Time Quanta in the Propagation Time Segment
which allows a poorer bus topology and maximum bus length.
In order to allow interoperability between CAN nodes of different vendors
it is essential that both - the absolute bit length (e.g. 1 microsecond) and the
sample point - are within certain limits. The following table gives an
overview of recommended bittiming setups.

\htmlonly
<table>
<tr class="memlist">
<td width=100><b>Bitrate</b></td>
<td width=120><b>Bittime</b></td>
<td width=200><b>Valid range for<br>sample point location</b></td>
<td width=200><b>Recommended sample<br>point location</b></td>
</tr>
<tr class="memlist">
<td>1 MBit/s</td>   <td>1&micro;s</td>      <td>75% .. 90%</td><td> 87,5%</td>
</tr>

<tr class="memlist">
<td>800 kBit/s</td> <td>1,25&micro;s  </td> <td>75% .. 90%</td><td> 87,5%</td>
</tr>

<tr class="memlist">
<td>500 kBit/s</td> <td>2&micro;s     </td> <td>85% .. 90%</td><td> 87,5%</td>
</tr>

<tr class="memlist">
<td>250 kBit/s</td> <td>4&micro;s     </td> <td>85% .. 90%</td><td> 87,5%</td>
</tr>

<tr class="memlist">
<td>125 kBit/s</td> <td>8&micro;s     </td> <td>85% .. 90%</td><td> 87,5%</td>
</tr>

<tr class="memlist">
<td>50 kBit/s</td> <td>20&micro;s     </td> <td>85% .. 90%</td><td> 87,5%</td>
</tr>

<tr class="memlist">
<td>20 kBit/s</td> <td>50&micro;s     </td> <td>85% .. 90%</td><td> 87,5%</td>
</tr>

<tr class="memlist">
<td>10 kBit/s</td> <td>100&micro;s     </td> <td>85% .. 90%</td><td> 87,5%</td>
</tr>

</table>
\endhtmlonly


The default baudrates defined in this table can be setup via the core function
CpCoreBaudrate(). The supplied parameter for the baudrate
selection is taken from the enumeration #CpBitrate_e (canpie.h).
*/